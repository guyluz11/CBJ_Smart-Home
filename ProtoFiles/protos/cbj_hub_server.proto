syntax = "proto3";

package CbjHub;

/// The greeting service definition.
service CbjHub {
  /// Client side sending requests for the hub like turn entrance light on,
  /// and updating about it status like client opened movie (for the hub to
  /// process). Getting requests from the hub like play music on the phone, and
  /// status of entities that have been changed like update layout to show
  /// entrance lights on.
  rpc ClientTransferEntities(stream ClientStatusRequests)
      returns (stream RequestsAndStatusFromHub);

  /// Hub side sending requests for the clients like turn on music, and updated
  /// status of entities like entrance light got turned on. Getting request like
  /// to turn on lights, and getting client updated status to process like
  /// client opened a move.
  rpc HubTransferEntities(stream RequestsAndStatusFromHub)
      returns (stream ClientStatusRequests);

  /// Get computer yaml and protoc version and more info about the computer
  rpc getCompHubInfo(CompHubInfo) returns (CompHubInfo);
}

/// Being added to send data for explain the type that was sent
enum SendingType {
  /// Not sure what we sent or got
  undefinedType = 0;
  /// String without any structure
  stringType = 1;
  /// Partial entity data in the form of json
  partialEntityType = 2;
  /// Entity object in the form of json
  entityType = 3;
  /// Sending mqtt massage
  mqttMassageType = 4;
  /// Scenes
  sceneType = 5;
  /// Schedule
  scheduleType = 6;
  /// Routine
  routineType = 7;
  /// Bindings
  bindingsType = 8;
  /// Type for login into other vendors
  vendorLoginType = 9;
  /// First connection, for sending first connection info like all entities
  /// status and more
  firstConnection = 10;
  /// Remote Pipes Domain information
  remotePipesInformation = 11;
  /// Request to get the entity and software info like proto file version and
  /// more
  getHubEntityInfo = 12;
  /// Response that contains entity and software info like proto file version
  responseHubEntityInfo = 13;
  /// Response that contains room object
  roomType = 14;
  /// Sending location of entity
  location = 15;
}

/// List of purposes that each area in the home can have
enum AreaPurposesTypes {
  bedroom = 0;
  studyRoom = 1;
  workRoom = 2;
  tvRoom = 3;
  videoGames = 4;
  livingRoom = 5;
  diningRoom = 6;
  kitchen = 7;
  outside = 8;
  outsidePrimary = 9;
  outsideNotPrimary = 10;
  toiletRoom = 11;
  shower = 12;
  trainingRoom = 13;
  meditation = 14;
  romantic = 15;
  stairsInside = 16;
  stairsOutside = 17;
  childrenRoom = 18;
  cinemaRoom = 19;
  boardGames = 20;
  bathtub = 21;
  laundryRoom = 22;
  protectedSpace = 23;
  safeRoom = 24;
  attic = 25;
  holidayCabin = 26;
}

message ClientStatusRequests {
  SendingType sendingType = 41;
  string allRemoteCommands = 42;
}

message RequestsAndStatusFromHub {
  SendingType sendingType = 43;
  string allRemoteCommands = 44;
}

message AllRemoteCommands { SmartEntityInfo smartEntityInfo = 40; }

message FirstSetupMessage {
  CompHubInfo compInfo = 38;
  CloudAccountInformation cloudAccountInformation = 39;
}

message CompHubInfo {
  CbjHubIno cbjInfo = 47;
  CompHubSpecs compSpecs = 21;
}

message CbjHubIno {
  string entityName = 48;
  string pubspecYamlVersion = 27;
  string pubspecYamlBuildNumber = 51;
  string protoLastGenDate = 49;
  string dartSdkVersion = 52;
}

message CompHubSpecs {
  string compId = 22;
  string compUuid = 23;
  string compOs = 24;
  string compModel = 25;
  string compType = 26;
  string compIp = 50;
}

message MicrocontrollerSpecs {
  string microcontrollerModel = 31;
  string microcontrollerType = 32;
  string softwareVersion = 33;
}

/// The request message containing the user's name.
message SmartEntityInfo {
  string id = 1;
  string state = 3;
  string defaultName = 14;
  string roomId = 15;
  string senderDeviceModel = 16;
  string senderDeviceOs = 17;
  string senderId = 18;
  string serverTimeStamp = 19;
  string stateMassage = 20;
  MqttMassage mqttMassage = 43;

  bool isComputer = 29;

  CompHubSpecs compSpecs = 30;

  MicrocontrollerSpecs microcontrollerSpecsSpecs = 31;

  EntityTypesActions entityTypesActions = 34;
}

/// The response message containing the greetings
message SmartEntityStatus { bool onOffState = 4; }

message MqttMassage {
  string mqttTopic = 44;
  string mqttMassage = 45;
}

/// Did the commend succeeded (true) or not (false)
message CommendStatus { bool success = 5; }

message SmartEntitiesUpdateDetails {
  SmartEntityInfo smartEntity = 6;
  string newName = 7;
}

message CloudAccountInformation {
  string cloudProjectId = 8;
  string cloudApiKey = 9;
  string userEmail = 10;
  string userPassword = 11;
  string homeId = 12;
}

message EntityTypesActions {
  string vendorsAndServices = 46;
  string entityType = 35;
  string entityAction = 36;
  string entityStateGRPC = 37;
}
